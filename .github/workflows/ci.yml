name: JsCoq's CI Action

on:
  push:
    branches:
      - v8.8
      - v8.9
      - v8.10
      - v8.11
      - v8.12
      - v8.13
      - v8.14
      - v8.15
      - v8.16
      - v8.17
  pull_request:
    branches:
      - v8.8
      - v8.9
      - v8.10
      - v8.11
      - v8.12
      - v8.13
      - v8.14
      - v8.15
      - v8.16
      - v8.17

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        jscoq_arch: [32, 64]
    env:
      OPAMJOBS: "2"
      OPAMROOTISOK: "true"
      OPAMYES: "true"
      NJOBS: "2"
      JSCOQ_ARCH: ${{ matrix.jscoq_arch }}
      OPAM_LINUX_URL: https://github.com/ocaml/opam/releases/download/2.1.3/opam-2.1.3-x86_64-linux
      OPAM_MACOS_URL: https://github.com/ocaml/opam/releases/download/2.1.3/opam-2.1.3-x86_64-darwin
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "true"
      - name: Install apt dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get -o Acquire::Retries=30 update -q
          sudo apt-get -o Acquire::Retries=30 install gcc-multilib g++-multilib libgmp-dev:i386 -y --allow-unauthenticated
      - uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "npm"
      - name: OPAM Set up
        run: |
          sudo curl -sL $OPAM_LINUX_URL -o /usr/bin/opam &&
          sudo chmod 755 /usr/bin/opam
      - name: OCaml Set up
        run: |
          opam init -y --bare --disable-sandboxing || true
          eval $(opam env)
          ./etc/toolchain-setup.sh --"$JSCOQ_ARCH"
          opam switch
          opam list
          opam config var root
      - name: Coq build
        run: |
          echo 'Using Node.js:' && node --version
          set -e
          echo 'Building Coq...' # && echo -en 'travis_fold:start:coq.build\\r'
          make coq-get
          # echo -en 'travis_fold:end:coq.build\\r'
      - name: jsCoq build
        run: |
          set -e
          echo 'Building JsCoq...' # && echo -en 'travis_fold:start:jscoq.build\\r'
          make jscoq
          # echo -en 'travis_fold:end:jscoq.build\\r'
          # echo 'Building Addons...' && echo -en 'travis_fold:start:addons.build\\r'
          # EJGA: We need to resurrect this in a different way.
          # make addons
          # echo -en 'travis_fold:end:addons.build\\r'
      - name: jsCoq test
        run: |
          set -e
          echo 'Testing JsCoq...' # && echo -en 'travis_fold:start:jscoq.build\\r'
          yarn install # EJGA: uggg, but otherwise this won't work.
          make test
          # echo -en 'travis_fold:end:jscoq.build\\r'
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      # - name: Login to DockerHub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build (no push atm)
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          file: etc/docker/Dockerfile
          context: etc/docker
          target: jscoq-addons
          push: false
          tags: jscoq/jscoq:latest
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
