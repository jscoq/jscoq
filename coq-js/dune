(library
 (name jscoqlib)
 (modes byte)
 (modules :standard \ jscoq_worker jslog)
 (preprocess (staged_pps lwt_ppx js_of_ocaml-ppx ppx_import ppx_deriving_yojson))
 (flags :standard -w -39)
 (libraries js_of_ocaml-lwt yojson ppx_deriving_yojson.runtime coq-core.stm coq-core.toplevel
            jslib coq-serapi.serlib coq-serapi.serapi_v8_14))

(executable
 (name jscoq_worker)
 (modules jscoq_worker)
 (modes byte js)
 (preprocess (staged_pps lwt_ppx js_of_ocaml-ppx ppx_import ppx_deriving_yojson))
 (js_of_ocaml
  (javascript_files
    js_stub/mutex.js
    js_stub/unix.js
    js_stub/coq_vm.js
    js_stub/interrupt.js
    js_stub/zarith.js
    marshal-arch.js)
  (flags :standard (:include .extraflags) --dynlink +dynlink.js +toplevel.js --setenv PATH=/bin))
 (link_flags -linkall -no-check-prims)
 ; The old makefile set: -noautolink -no-check-prims
 (libraries num zarith_stubs_js jscoqlib))

(rule
 (target jscoq_version.ml)
 (deps ../package.json)
 (action (with-stdout-to %{target}
  (run node -p 
      "`let jscoq_version = \"${require(\"../package.json\").version}\"`"))))

(rule
 (targets marshal-arch.js)
 (action
  (copy js_stub/marshal%{ocaml-config:word_size}.js %{targets})))

; Link jscoq_worker.js => jscoq_worker.bc.js
; This is done to allow serving from either build or source tree the same way.
; Notice the `promote` mode, since the source tree may have a (different) link
; present, created by `make links`.
(rule
 (targets jscoq_worker.js)
 (deps jscoq_worker.bc.js)
 (mode promote)
 (action (bash "ln -s %{deps} %{targets}")))

; Set debug flags if JSCOQ_DEBUG environment variable is set.
; (ugly, but there are no conditional expressions in Dune)
(rule  
 (targets .extraflags)
 (deps (env_var JSCOQ_DEBUG))
 (action (with-stdout-to %{targets} 
    (bash "echo '(' ${JSCOQ_DEBUG+ --pretty --noinline --disable shortvar --debug-info} ')'")))
)
